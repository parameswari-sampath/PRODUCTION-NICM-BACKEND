MCQ EXAM API DOCUMENTATION

Framework: Fiber v2
Database: PostgreSQL with pgx driver
Connection Pool: 25 max, 5 min connections
Migrations: Automatic on startup

BASE URL: http://localhost:8080

===========================================
STUDENT ENDPOINTS
===========================================

1. CREATE STUDENT
   POST /api/students
   Body: {"name": "John Doe", "email": "john@example.com"}
   Response: {"id": 1, "name": "John Doe", "email": "john@example.com", "created_at": "...", "updated_at": "..."}

2. GET ALL STUDENTS (with pagination)
   GET /api/students?limit=10&offset=0
   Query params: limit (default 100, max 1000), offset (default 0)
   Response: {"students": [...], "total": 1375, "limit": 10, "offset": 0, "count": 10}
   - "total": total students in database
   - "count": students returned in this page

3. GET STUDENT BY ID
   GET /api/students/1
   Response: {"id": 1, "name": "John Doe", "email": "john@example.com", "created_at": "...", "updated_at": "..."}

4. UPDATE STUDENT
   PUT /api/students/1
   Body: {"name": "Jane Doe", "email": "jane@example.com"}
   Response: {"id": 1, "name": "Jane Doe", "email": "jane@example.com", "created_at": "...", "updated_at": "..."}

5. DELETE STUDENT
   DELETE /api/students/1
   Response: 204 No Content

6. BULK CREATE STUDENTS
   POST /api/students/bulk
   Max: 2000 students per request, 30 second timeout
   Body: {"students": [{"name": "John Doe", "email": "john@example.com"}, {"name": "Jane Doe", "email": "jane@example.com"}]}
   Response (success): {"message": "Students created successfully", "count": 2}
   Response (duplicates): {"message": "Some students were not created...", "success": 150, "failed": 3, "duplicates": [...]}

===========================================
ADMIN ENDPOINTS
===========================================

7. RESET DATABASE (DROP ALL TABLES & RE-RUN MIGRATIONS)
   POST /api/admin/reset-db
   WARNING: This deletes ALL data permanently!
   Response: {"message": "Database reset successfully", "status": "All tables dropped and migrations re-run"}

===========================================
MAIL ENDPOINTS
===========================================

8. SEND EMAIL (Single)
   POST /api/mail/send
   Body: {
     "to_email": "keerthana@meikuraledutech.in",
     "to_name": "Keerthana",
     "subject": "Test Email",
     "html_body": "<div><b>Test email sent successfully.</b></div>"
   }
   Response: {"message": "Email sent successfully", "to": "keerthana@meikuraledutech.in", "subject": "Test Email", "request_id": "..."}

9. SEND EMAIL TO ALL STUDENTS (Personalized)
   POST /api/mail/send-all
   Body: {
     "subject": "Exam Invitation",
     "html_body": "<div>Dear {{name}},<br><br>You are invited to the exam...</div>"
   }
   Note: {{name}} will be replaced with each student's name
   Response: {
     "message": "All emails sent successfully",
     "total": 1378,
     "sent": 1378
   }
   All emails are logged in email_logs table with ZeptoMail response tracking
   All emails marked as "sent" initially. Webhooks will update status to "bounced" if delivery fails.

10. GET EMAIL COUNT
   GET /api/mail/stats
   Response: {"total_emails": 1378}
   Returns total number of email addresses in students database

11. SEARCH EMAIL
   GET /api/mail/search?email=test@example.com
   Response (found): {"email": "test@example.com"}
   Response (not found): {"error": "Email not found"}
   Checks if email exists in students database

12. GET EMAIL LOGS
   GET /api/mail/logs?status=sent
   Query params: status (default: sent, options: sent, bounced, failed)

   Examples:
   curl "http://localhost:8080/api/mail/logs"                    # Default: sent emails
   curl "http://localhost:8080/api/mail/logs?status=sent"       # Sent emails
   curl "http://localhost:8080/api/mail/logs?status=failed"     # Failed emails (no request_id)
   curl "http://localhost:8080/api/mail/logs?status=bounced"    # Bounced emails

   Response: {
     "count": 3,
     "logs": [
       {
         "id": 1,
         "student_id": 1,
         "email": "test@example.com",
         "subject": "Test Email",
         "status": "sent",
         "request_id": "2518b...",
         "response_code": "EM_104",
         "response_message": "Email request received",
         "sent_at": "2025-10-04T10:00:00Z"
       }
     ]
   }
   Returns up to 1000 email logs filtered by status
   Note: "failed" status is set by webhook when ZeptoMail reports bounce/delivery failure

13. RESEND CONFERENCE INVITATION (Fail-Safe Mechanism)
   POST /api/mail/resend-conference
   No request body required

   Response (success): {
     "message": "Conference invitations resent successfully",
     "total": 45,
     "sent": 45
   }

   Response (no students to resend): {
     "message": "No students found who need resend",
     "total": 0,
     "sent": 0
   }

   Notes:
   - Resends conference invitation ONLY to students who did NOT attend the conference
   - Reuses existing conference tokens (no new token generation)
   - Same tracking URL as original email
   - Only targets students where:
     * email_type = 'firstMail'
     * conference_attended = false (did not verify/attend conference)
     * conference_token IS NOT NULL
   - Uses same email template as Phase1FirstMailVerification
   - Useful fail-safe mechanism for students who missed attending the conference
   - 100ms delay between emails to avoid rate limiting
   - These students will NOT be eligible for second email (test invitation) until they attend

14. RESEND TEST INVITATION (Fail-Safe Mechanism)
   POST /api/mail/resend-test-invitation
   No request body required

   Response (success): {
     "message": "Test invitations resent successfully",
     "total": 25,
     "sent": 25
   }

   Response (no students to resend): {
     "message": "No students found who need test invitation resend",
     "total": 0,
     "sent": 0
   }

   Notes:
   - Resends test invitation ONLY to students who attended conference but did NOT start test
   - Reuses existing access codes (OTP) - no new OTP generation
   - Same test invitation email template as Phase2SecondMailSending
   - Only targets students where:
     * conference_attended = true (verified conference token)
     * access_code IS NOT NULL (received OTP)
     * No record in sessions table (never started test)
   - Uses same email format with OTP link and access code
   - Useful fail-safe mechanism for students who didn't click the test link
   - 100ms delay between emails to avoid rate limiting

===========================================
EMAIL TRACKING ENDPOINTS
===========================================

15. GET STUDENTS WHO DID NOT ATTEND CONFERENCE
   GET /api/tracking/not-attended

   Response (success - 200 OK): {
     "count": 45,
     "students": [
       {
         "student_id": 123,
         "name": "John Doe",
         "email": "john@example.com",
         "opened": true,
         "opened_at": "2025-10-08T14:30:00Z",
         "email_type": "firstMail"
       },
       {
         "student_id": 456,
         "name": "Jane Smith",
         "email": "jane@example.com",
         "opened": null,
         "opened_at": null,
         "email_type": null
       }
     ]
   }

   Notes:
   - Returns all students who did NOT attend the conference
   - Filters students where conference_attended = false OR NULL
   - Includes students who may have opened email but didn't verify token
   - Shows email open status and timestamp if available
   - Useful for identifying students who need follow-up
   - Can be used to determine who to resend conference invitations to

16. GET STUDENTS WHO DID NOT START TEST
   GET /api/tracking/not-started-test

   Response (success - 200 OK): {
     "count": 25,
     "students": [
       {
         "student_id": 123,
         "name": "John Doe",
         "email": "john@example.com",
         "access_code": "ABC123",
         "conference_attended_at": "2025-10-08T14:30:00Z"
       },
       {
         "student_id": 456,
         "name": "Jane Smith",
         "email": "jane@example.com",
         "access_code": "XYZ789",
         "conference_attended_at": "2025-10-08T15:00:00Z"
       }
     ]
   }

   Notes:
   - Returns students who attended the conference BUT did NOT start the test
   - Filters students where:
     * conference_attended = true (verified conference token)
     * access_code IS NOT NULL (received OTP/access code)
     * No record in sessions table (never created a test session)
   - Shows when they attended the conference
   - Includes their access code (OTP) for reference
   - Useful for identifying students who need test invitation reminder
   - Can be used to determine who to resend test invitations to

===========================================
WEBHOOK ENDPOINTS
===========================================

17. ZEPTOMAIL WEBHOOK (Bounce Notifications)
   POST /api/webhooks/zeptomail
   Unauthenticated endpoint for ZeptoMail bounce notifications

   Receives bounce events and updates email status from "sent" to "failed"
   Uses request_id from webhook payload to find and update email_logs

   Always returns HTTP 200 (as required by ZeptoMail)

   Configure this URL in ZeptoMail dashboard:
   https://yourdomain.com/api/webhooks/zeptomail

===========================================
EVENT SCHEDULING (CRON JOB)
===========================================

18. CREATE EVENT SCHEDULE
   POST /api/event/schedule
   Body: {
     "first_scheduled_time": "2025-10-05T15:30:00",
     "second_scheduled_time": "2025-10-05T20:00:00",
     "video_url": "https://www.youtube.com/shorts/s5fRuoZ0SVw"
   }

   Response: {
     "message": "Schedule created successfully",
     "schedule_id": 1,
     "first_function": "Phase1FirstMailVerification",
     "first_scheduled_time": "2025-10-05T15:30:00+05:30",
     "second_function": "Phase2SecondMailSending",
     "second_scheduled_time": "2025-10-05T20:00:00+05:30",
     "video_url": "https://www.youtube.com/shorts/s5fRuoZ0SVw"
   }

   Notes:
   - Times must be in IST (Indian Standard Time) format: YYYY-MM-DDTHH:MM:SS
   - Example: "2025-10-05T15:30:00" means 3:30 PM IST on Oct 5, 2025
   - Time format is: YYYY-MM-DDTHH:MM:SS (24-hour format)
     * YYYY = 4-digit year (e.g., 2025)
     * MM = 2-digit month (01-12)
     * DD = 2-digit day (01-31)
     * HH = 2-digit hour in 24-hour format (00-23)
     * MM = 2-digit minute (00-59)
     * SS = 2-digit second (00-59)
   - No need for "Z" or "+05:30" - just provide IST time directly
   - second_scheduled_time must be after first_scheduled_time
   - video_url is required - the YouTube/video URL to show after first email verification
   - Cron job checks every minute and executes functions at scheduled times
   - Available functions:
     * Phase1FirstMailVerification - Sends first email to all students with conference invitation
     * Phase2SecondMailSending - Sends second email to students who verified first email

19. GET EVENT SCHEDULE
   GET /api/event/schedule

   Response: {
     "id": 1,
     "first_function": "DummyFirstEmail",
     "first_scheduled_time": "2025-10-05T10:00:00Z",
     "first_executed": true,
     "first_executed_at": "2025-10-05T10:00:02Z",
     "second_function": "DummySecondEmail",
     "second_scheduled_time": "2025-10-05T18:00:00Z",
     "second_executed": true,
     "second_executed_at": "2025-10-05T18:00:03Z",
     "created_at": "2025-10-04T12:00:00Z"
   }

   Returns the most recent event schedule with execution status

===========================================
CONFERENCE TOKEN VERIFICATION
===========================================

20. VERIFY CONFERENCE TOKEN
   POST /api/verify-token
   Body: {
     "token": "a1b2c3d4e5f6..."
   }

   Response (valid token): {
     "valid": true,
     "video_url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
     "student_id": 123
   }

   Response (invalid/used token): {
     "valid": false,
     "message": "Invalid or already used token"
   }

   Notes:
   - Token is sent in the first email conference link: {FRONTEND_URL}/live?token={token}
   - Frontend extracts token from URL and sends to this endpoint
   - Returns YouTube video URL from event_schedule table
   - Marks student as conference_attended = true (one-time use)
   - Only students who verify token are eligible for second email

===========================================
LIVE API ENDPOINTS
===========================================

21. VERIFY FIRST MAIL TOKEN
   POST /api/live/verify-first-mail
   Body: {
     "token": "a1b2c3d4e5f6..."
   }

   Response (success): {
     "success": true,
     "video_url": "https://www.youtube.com/shorts/s5fRuoZ0SVw",
     "message": "Token verified successfully"
   }

   Response (failure): {
     "success": false,
     "message": "Invalid or expired token"
   }

   Notes:
   - Token is sent in first email link: {FRONTEND_URL}/live?token={token}
   - Frontend extracts token and sends to this endpoint
   - Backend validates token, marks conference_attended = true
   - Generates 6-digit alphanumeric access_code for second email
   - Returns YouTube video URL from event_schedule table
   - Token can only be used once

22. VERIFY OTP (Access Code)
   POST /api/live/verify-otp
   Body: {
     "otp": "ABC123"
   }

   Response (success): {
     "success": true,
     "session_token": "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6A7B8C9D0E1F2G3H4",
     "email": "john@example.com",
     "name": "John Doe",
     "message": "OTP verified successfully"
   }

   Response (failure - invalid OTP): {
     "success": false,
     "message": "Already test completed or invalid OTP"
   }

   Response (failure - test not started): {
     "success": false,
     "message": "Test has not started yet"
   }

   Response (failure - test expired): {
     "success": false,
     "message": "Test time expired"
   }

   Notes:
   - OTP (access_code) is sent in second email link: {FRONTEND_URL}?otp={access_code}
   - Frontend extracts OTP and sends to this endpoint
   - Backend validates:
     * OTP exists in email_tracking.access_code where conference_attended = true
     * No session already exists for this student
     * Current time is within 15 minutes of second_scheduled_time
   - Time window: second_scheduled_time to second_scheduled_time + 15 minutes
   - Creates new session with student_id, session_token, and access_code
   - Returns session_token (64-character alphanumeric), student email, and student name
   - One-time use: Once session created, same OTP cannot be used again

23. START SESSION
   POST /api/live/start-session
   Body: {
     "session_token": "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6A7B8C9D0E1F2G3H4"
   }

   Response (success - 201 Created): {
     "success": true,
     "message": "Session started successfully"
   }

   Response (failure - 404 Not Found): {
     "success": false,
     "message": "Invalid session token"
   }

   Response (failure - 400 Bad Request): {
     "success": false,
     "message": "Session token is required"
   }

   Notes:
   - Frontend sends session_token received from verify-otp endpoint
   - Backend validates session token exists in database
   - Updates started_at timestamp to current time (NOW())
   - Returns 201 Created on success, 404 if token invalid
   - This marks the official start time of the test session

24. SUBMIT ANSWER
   POST /api/live/submit-answer
   Body: {
     "session_token": "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6A7B8C9D0E1F2G3H4",
     "question_id": 1,
     "selected_option_index": 2,
     "is_correct": true,
     "time_taken_seconds": 45
   }

   Response (success - 201 Created): {
     "success": true,
     "message": "Answer submitted successfully"
   }

   Response (failure - 400 Bad Request): {
     "success": false,
     "message": "Invalid request body" / "Session token is required" / "Invalid question ID (must be 1-120)" / "Invalid option index (must be 0-3)" / "Invalid time taken"
   }

   Response (failure - 404 Not Found): {
     "success": false,
     "message": "Invalid session token"
   }

   Response (failure - 403 Forbidden): {
     "success": false,
     "message": "Test already completed"
   }

   Response (failure - 409 Conflict): {
     "success": false,
     "message": "Answer already submitted for this question"
   }

   Notes:
   - Frontend sends session_token, question_id (1-120), selected option index (0-3), correctness, and time taken
   - Backend validates session exists and test not completed
   - Prevents duplicate answers for same question
   - Stores answer with is_correct flag and time_taken_seconds
   - All answers linked to session via session_id

25. END SESSION
   POST /api/live/end-session
   Body: {
     "session_token": "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6A7B8C9D0E1F2G3H4"
   }

   Response (success - 200 OK): {
     "success": true,
     "message": "Test completed successfully",
     "score": 85,
     "total_time_taken_seconds": 3600,
     "total_questions_answered": 120
   }

   Response (failure - 400 Bad Request): {
     "success": false,
     "message": "Invalid request body" / "Session token is required"
   }

   Response (failure - 404 Not Found): {
     "success": false,
     "message": "Invalid session token"
   }

   Response (failure - 409 Conflict): {
     "success": false,
     "message": "Test already completed"
   }

   Response (failure - 500 Internal Server Error): {
     "success": false,
     "message": "Failed to calculate score" / "Failed to calculate total time" / "Failed to count questions answered" / "Failed to end session"
   }

   Notes:
   - Frontend sends session_token when student finishes the test
   - Backend validates session exists and test not already completed
   - Calculates total score (count of correct answers from answers table)
   - Calculates total time taken (sum of time_taken_seconds from all answers)
   - Counts total questions answered
   - Updates sessions table:
     * completed = true
     * completed_at = NOW()
     * score = calculated score
     * total_time_taken_seconds = sum of answer times
   - Returns final score, total time taken, and questions answered
   - Once completed, session cannot submit more answers

26. GET RESULT
   POST /api/live/result
   Body: {
     "email": "student@example.com"
   }

   Response (success - 200 OK): {
     "success": true,
     "student": {
       "name": "John Doe",
       "email": "student@example.com"
     },
     "session": {
       "score": 85,
       "total_time_taken_seconds": 3600,
       "total_questions_answered": 115,
       "completed": true
     },
     "sections": [
       {
         "id": 1,
         "name": "Section 1",
         "time_limit": 900,
         "questions": [
           {
             "id": 1,
             "question": "The first cooperative society was established in which country?",
             "description": "General Cooperative Concepts & Evolution",
             "options": ["England", "France", "Germany", "USA"],
             "correctAnswer": 0,
             "selected_answer": 0,
             "is_correct": true,
             "time_taken_seconds": 45
           },
           {
             "id": 2,
             "question": "...",
             "description": "...",
             "options": [...],
             "correctAnswer": 3,
             "selected_answer": null,
             "is_correct": null,
             "time_taken_seconds": null
           }
         ]
       }
     ]
   }

   Response (failure - 400 Bad Request): {
     "success": false,
     "message": "Invalid request body" / "Email is required"
   }

   Response (failure - 404 Not Found): {
     "success": false,
     "message": "Student not found" / "No session found for this student"
   }

   Response (failure - 500 Internal Server Error): {
     "success": false,
     "message": "Failed to fetch answers" / "Failed to load questions" / "Failed to parse questions"
   }

   Notes:
   - Frontend sends student's email address
   - Backend validates email exists in students table
   - Fetches session data (score, time, completion status)
   - Fetches all student's answers from answers table
   - Loads questions_with_timer.json file
   - Merges student's answers into complete question structure
   - Questions not answered have null values for selected_answer, is_correct, time_taken_seconds
   - Returns complete result with all 120 questions across 4 sections
   - Each question shows: question text, options, correct answer, student's answer (if any)
   - One session per student - returns that student's single session result
   - Loads questions from questions_with_timer.json in project root

===========================================
LEADERBOARD ENDPOINTS
===========================================

27. GET OVERALL LEADERBOARD (Top 100)
   GET /api/leaderboard/overall

   Response (success - 200 OK): {
     "success": true,
     "total": 1234,
     "data": [
       {
         "rank": 1,
         "student_id": 123,
         "name": "John Doe",
         "email": "john@example.com",
         "score": 118,
         "total_time_taken_seconds": 3200
       },
       {
         "rank": 2,
         "student_id": 456,
         "name": "Jane Smith",
         "email": "jane@example.com",
         "score": 118,
         "total_time_taken_seconds": 3450
       }
     ]
   }

   Notes:
   - Returns top 100 students ranked by score (DESC) then time (ASC)
   - Only includes students who completed the test (completed = true)
   - Ties broken by faster completion time
   - "total" shows total number of students who completed the test
   - "data" array limited to 100 entries

28. GET SECTION LEADERBOARD (Top 100 per Section)
   GET /api/leaderboard/section/:section_id

   Examples:
   GET /api/leaderboard/section/1  # Section 1 leaderboard
   GET /api/leaderboard/section/2  # Section 2 leaderboard
   GET /api/leaderboard/section/3  # Section 3 leaderboard
   GET /api/leaderboard/section/4  # Section 4 leaderboard

   Response (success - 200 OK): {
     "success": true,
     "section_id": 1,
     "section_name": "Section 1",
     "total": 1234,
     "data": [
       {
         "rank": 1,
         "student_id": 123,
         "name": "John Doe",
         "email": "john@example.com",
         "section_score": 28,
         "section_time_taken_seconds": 720
       },
       {
         "rank": 2,
         "student_id": 789,
         "name": "Bob Johnson",
         "email": "bob@example.com",
         "section_score": 27,
         "section_time_taken_seconds": 650
       }
     ]
   }

   Response (failure - 400 Bad Request): {
     "success": false,
     "message": "Invalid section ID (must be 1-4)"
   }

   Response (failure - 404 Not Found): {
     "success": false,
     "message": "Section not found"
   }

   Notes:
   - Returns top 100 students for a specific section
   - Section IDs: 1-4 (30 questions each)
   - Ranked by section_score (DESC) then section_time_taken_seconds (ASC)
   - Section score = count of correct answers in that section only
   - Section time = sum of time taken for questions in that section only
   - Only includes students who completed the test
   - Ties broken by faster section completion time

29. GET ALL RESULTS (Ranked by Score and Time)
   GET /api/results

   Response (success - 200 OK): {
     "count": 150,
     "results": [
       {
         "email": "student1@example.com",
         "score": 118,
         "total_time_taken_seconds": 3200
       },
       {
         "email": "student2@example.com",
         "score": 118,
         "total_time_taken_seconds": 3450
       },
       {
         "email": "student3@example.com",
         "score": 115,
         "total_time_taken_seconds": 3100
       }
     ]
   }

   Notes:
   - Returns all students who completed the test
   - Ranked by score (DESC) then time taken (ASC)
   - Higher scores appear first
   - For same score, faster time appears first
   - Only includes completed sessions (completed = true)
   - Returns email, score, and total time taken in seconds
   - JSON format suitable for data export or analysis

30. GET USER SECTION RANKS
   GET /api/leaderboard/user-sections?email=student@example.com

   Response (success - 200 OK): {
     "success": true,
     "student_id": 123,
     "student_name": "John Doe",
     "student_email": "student@example.com",
     "sections": [
       {
         "section_id": 1,
         "section_name": "Section 1",
         "score": 28,
         "time_taken_seconds": 720,
         "rank": 5,
         "total_participants": 1234
       },
       {
         "section_id": 2,
         "section_name": "Section 2",
         "score": 25,
         "time_taken_seconds": 850,
         "rank": 12,
         "total_participants": 1234
       },
       {
         "section_id": 3,
         "section_name": "Section 3",
         "score": 30,
         "time_taken_seconds": 600,
         "rank": 1,
         "total_participants": 1234
       },
       {
         "section_id": 4,
         "section_name": "Section 4",
         "score": 27,
         "time_taken_seconds": 780,
         "rank": 8,
         "total_participants": 1234
       }
     ]
   }

   Response (failure - 400 Bad Request): {
     "success": false,
     "message": "Email parameter is required"
   }

   Response (failure - 404 Not Found): {
     "success": false,
     "message": "Student not found" / "No completed session found for this student"
   }

   Notes:
   - Returns the student's rank in each of the 4 sections
   - Email parameter required in query string
   - Shows score, time taken, rank, and total participants for each section
   - Rank calculated based on section-specific scores and times
   - Only works for students who completed the test
   - Sections data loaded from questions_with_timer.json

===========================================
COMPREHENSIVE STATISTICS
===========================================

31. GET COMPREHENSIVE STATS (ALL-IN-ONE)
   GET /api/stats/comprehensive

   Response (success - 200 OK): {
     "success": true,
     "top_100_overall": [
       {
         "rank": 1,
         "student_id": 123,
         "name": "John Doe",
         "email": "john@example.com",
         "score": 118,
         "total_time_taken_seconds": 3200
       },
       {
         "rank": 2,
         "student_id": 456,
         "name": "Jane Smith",
         "email": "jane@example.com",
         "score": 118,
         "total_time_taken_seconds": 3450
       }
       // ... up to 100 entries
     ],
     "section_leaderboards": {
       "Section 1": {
         "section_id": 1,
         "section_name": "Section 1",
         "total": 1234,
         "top_100": [
           {
             "rank": 1,
             "student_id": 123,
             "name": "John Doe",
             "email": "john@example.com",
             "section_score": 28,
             "section_time_taken_seconds": 720
           }
           // ... up to 100 entries
         ]
       },
       "Section 2": {
         "section_id": 2,
         "section_name": "Section 2",
         "total": 1234,
         "top_100": [...]
       },
       "Section 3": {
         "section_id": 3,
         "section_name": "Section 3",
         "total": 1234,
         "top_100": [...]
       },
       "Section 4": {
         "section_id": 4,
         "section_name": "Section 4",
         "total": 1234,
         "top_100": [...]
       }
     },
     "total_attended_conference": 1234,
     "completion_stats": {
       "total_attended_conference": 1234,
       "total_started_test": 850,
       "total_completed_test": 720,
       "total_incomplete_test": 130,
       "total_never_started": 384
     }
   }

   Notes:
   - Single API endpoint that combines all 6 key statistics:
     1. Top 100 overall ranks (by score DESC, time ASC)
     2. Section-wise top 100 ranks for all 4 sections
     3. Total attended conference (verified first email token)
     4. Total started test (have sessions)
     5. Total completed test
     6. Total incomplete test (started but not completed)
   - Also includes total_never_started (got OTP but never started)
   - Timeout: 30 seconds (handles multiple queries)
   - Reduces API calls from 6+ to 1 for complete statistics
   - Perfect for dashboard/admin overview pages

===========================================
HEALTH CHECK
===========================================

GET /health
Response: OK

===========================================
DATABASE MIGRATIONS
===========================================

Migrations run automatically on server start
Location: migrations/
Current migrations:
- 000001_create_students_table.up.sql
- 000001_create_students_table.down.sql
- 000002_add_unique_email_constraint.up.sql (EMAIL UNIQUE)
- 000002_add_unique_email_constraint.down.sql

Note: Email is UNIQUE. Duplicate emails return 409 Conflict error

===========================================
RUN SERVER
===========================================

go run main.go

Server runs on port 8080 (or PORT env variable)
Includes: CORS (allow all), Logger, Recovery middleware
