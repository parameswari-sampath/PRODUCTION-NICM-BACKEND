MCQ EXAM API DOCUMENTATION

Framework: Fiber v2
Database: PostgreSQL with pgx driver
Connection Pool: 25 max, 5 min connections
Migrations: Automatic on startup

BASE URL: http://localhost:8080

===========================================
STUDENT ENDPOINTS
===========================================

1. CREATE STUDENT
   POST /api/students
   Body: {"name": "John Doe", "email": "john@example.com"}
   Response: {"id": 1, "name": "John Doe", "email": "john@example.com", "created_at": "...", "updated_at": "..."}

2. GET ALL STUDENTS (with pagination)
   GET /api/students?limit=10&offset=0
   Query params: limit (default 100, max 1000), offset (default 0)
   Response: {"students": [...], "total": 1375, "limit": 10, "offset": 0, "count": 10}
   - "total": total students in database
   - "count": students returned in this page

3. GET STUDENT BY ID
   GET /api/students/1
   Response: {"id": 1, "name": "John Doe", "email": "john@example.com", "created_at": "...", "updated_at": "..."}

4. UPDATE STUDENT
   PUT /api/students/1
   Body: {"name": "Jane Doe", "email": "jane@example.com"}
   Response: {"id": 1, "name": "Jane Doe", "email": "jane@example.com", "created_at": "...", "updated_at": "..."}

5. DELETE STUDENT
   DELETE /api/students/1
   Response: 204 No Content

6. BULK CREATE STUDENTS
   POST /api/students/bulk
   Max: 2000 students per request, 30 second timeout
   Body: {"students": [{"name": "John Doe", "email": "john@example.com"}, {"name": "Jane Doe", "email": "jane@example.com"}]}
   Response (success): {"message": "Students created successfully", "count": 2}
   Response (duplicates): {"message": "Some students were not created...", "success": 150, "failed": 3, "duplicates": [...]}

===========================================
ADMIN ENDPOINTS
===========================================

7. RESET DATABASE (DROP ALL TABLES & RE-RUN MIGRATIONS)
   POST /api/admin/reset-db
   WARNING: This deletes ALL data permanently!
   Response: {"message": "Database reset successfully", "status": "All tables dropped and migrations re-run"}

===========================================
MAIL ENDPOINTS
===========================================

8. SEND EMAIL (Single)
   POST /api/mail/send
   Body: {
     "to_email": "keerthana@meikuraledutech.in",
     "to_name": "Keerthana",
     "subject": "Test Email",
     "html_body": "<div><b>Test email sent successfully.</b></div>"
   }
   Response: {"message": "Email sent successfully", "to": "keerthana@meikuraledutech.in", "subject": "Test Email", "request_id": "..."}

9. SEND EMAIL TO ALL STUDENTS (Personalized)
   POST /api/mail/send-all
   Body: {
     "subject": "Exam Invitation",
     "html_body": "<div>Dear {{name}},<br><br>You are invited to the exam...</div>"
   }
   Note: {{name}} will be replaced with each student's name
   Response: {
     "message": "All emails sent successfully",
     "total": 1378,
     "sent": 1378
   }
   All emails are logged in email_logs table with ZeptoMail response tracking
   All emails marked as "sent" initially. Webhooks will update status to "bounced" if delivery fails.

10. GET EMAIL COUNT
   GET /api/mail/stats
   Response: {"total_emails": 1378}
   Returns total number of email addresses in students database

11. SEARCH EMAIL
   GET /api/mail/search?email=test@example.com
   Response (found): {"email": "test@example.com"}
   Response (not found): {"error": "Email not found"}
   Checks if email exists in students database

12. GET EMAIL LOGS
   GET /api/mail/logs?status=sent
   Query params: status (default: sent, options: sent, bounced, failed)

   Examples:
   curl "http://localhost:8080/api/mail/logs"                    # Default: sent emails
   curl "http://localhost:8080/api/mail/logs?status=sent"       # Sent emails
   curl "http://localhost:8080/api/mail/logs?status=failed"     # Failed emails (no request_id)
   curl "http://localhost:8080/api/mail/logs?status=bounced"    # Bounced emails

   Response: {
     "count": 3,
     "logs": [
       {
         "id": 1,
         "student_id": 1,
         "email": "test@example.com",
         "subject": "Test Email",
         "status": "sent",
         "request_id": "2518b...",
         "response_code": "EM_104",
         "response_message": "Email request received",
         "sent_at": "2025-10-04T10:00:00Z"
       }
     ]
   }
   Returns up to 1000 email logs filtered by status
   Note: "failed" status is set by webhook when ZeptoMail reports bounce/delivery failure

===========================================
WEBHOOK ENDPOINTS
===========================================

13. ZEPTOMAIL WEBHOOK (Bounce Notifications)
   POST /api/webhooks/zeptomail
   Unauthenticated endpoint for ZeptoMail bounce notifications

   Receives bounce events and updates email status from "sent" to "failed"
   Uses request_id from webhook payload to find and update email_logs

   Always returns HTTP 200 (as required by ZeptoMail)

   Configure this URL in ZeptoMail dashboard:
   https://yourdomain.com/api/webhooks/zeptomail

===========================================
EVENT SCHEDULING (CRON JOB)
===========================================

14. CREATE EVENT SCHEDULE
   POST /api/event/schedule
   Body: {
     "first_scheduled_time": "2025-10-05T15:30:00",
     "second_scheduled_time": "2025-10-05T20:00:00",
     "video_url": "https://www.youtube.com/shorts/s5fRuoZ0SVw"
   }

   Response: {
     "message": "Schedule created successfully",
     "schedule_id": 1,
     "first_function": "Phase1FirstMailVerification",
     "first_scheduled_time": "2025-10-05T15:30:00+05:30",
     "second_function": "Phase2SecondMailSending",
     "second_scheduled_time": "2025-10-05T20:00:00+05:30",
     "video_url": "https://www.youtube.com/shorts/s5fRuoZ0SVw"
   }

   Notes:
   - Times must be in IST (Indian Standard Time) format: YYYY-MM-DDTHH:MM:SS
   - Example: "2025-10-05T15:30:00" means 3:30 PM IST on Oct 5, 2025
   - Time format is: YYYY-MM-DDTHH:MM:SS (24-hour format)
     * YYYY = 4-digit year (e.g., 2025)
     * MM = 2-digit month (01-12)
     * DD = 2-digit day (01-31)
     * HH = 2-digit hour in 24-hour format (00-23)
     * MM = 2-digit minute (00-59)
     * SS = 2-digit second (00-59)
   - No need for "Z" or "+05:30" - just provide IST time directly
   - second_scheduled_time must be after first_scheduled_time
   - video_url is required - the YouTube/video URL to show after first email verification
   - Cron job checks every minute and executes functions at scheduled times
   - Available functions:
     * Phase1FirstMailVerification - Sends first email to all students with conference invitation
     * Phase2SecondMailSending - Sends second email to students who verified first email

15. GET EVENT SCHEDULE
   GET /api/event/schedule

   Response: {
     "id": 1,
     "first_function": "DummyFirstEmail",
     "first_scheduled_time": "2025-10-05T10:00:00Z",
     "first_executed": true,
     "first_executed_at": "2025-10-05T10:00:02Z",
     "second_function": "DummySecondEmail",
     "second_scheduled_time": "2025-10-05T18:00:00Z",
     "second_executed": true,
     "second_executed_at": "2025-10-05T18:00:03Z",
     "created_at": "2025-10-04T12:00:00Z"
   }

   Returns the most recent event schedule with execution status

===========================================
CONFERENCE TOKEN VERIFICATION
===========================================

16. VERIFY CONFERENCE TOKEN
   POST /api/verify-token
   Body: {
     "token": "a1b2c3d4e5f6..."
   }

   Response (valid token): {
     "valid": true,
     "video_url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
     "student_id": 123
   }

   Response (invalid/used token): {
     "valid": false,
     "message": "Invalid or already used token"
   }

   Notes:
   - Token is sent in the first email conference link: {FRONTEND_URL}/live?token={token}
   - Frontend extracts token from URL and sends to this endpoint
   - Returns YouTube video URL from event_schedule table
   - Marks student as conference_attended = true (one-time use)
   - Only students who verify token are eligible for second email

===========================================
LIVE API ENDPOINTS
===========================================

17. VERIFY FIRST MAIL TOKEN
   POST /api/live/verify-first-mail
   Body: {
     "token": "a1b2c3d4e5f6..."
   }

   Response (success): {
     "success": true,
     "video_url": "https://www.youtube.com/shorts/s5fRuoZ0SVw",
     "message": "Token verified successfully"
   }

   Response (failure): {
     "success": false,
     "message": "Invalid or expired token"
   }

   Notes:
   - Token is sent in first email link: {FRONTEND_URL}/live?token={token}
   - Frontend extracts token and sends to this endpoint
   - Backend validates token, marks conference_attended = true
   - Generates 6-digit alphanumeric access_code for second email
   - Returns YouTube video URL from event_schedule table
   - Token can only be used once

===========================================
HEALTH CHECK
===========================================

GET /health
Response: OK

===========================================
DATABASE MIGRATIONS
===========================================

Migrations run automatically on server start
Location: migrations/
Current migrations:
- 000001_create_students_table.up.sql
- 000001_create_students_table.down.sql
- 000002_add_unique_email_constraint.up.sql (EMAIL UNIQUE)
- 000002_add_unique_email_constraint.down.sql

Note: Email is UNIQUE. Duplicate emails return 409 Conflict error

===========================================
RUN SERVER
===========================================

go run main.go

Server runs on port 8080 (or PORT env variable)
Includes: CORS (allow all), Logger, Recovery middleware
